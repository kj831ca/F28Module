<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BaseModule</name>
    </assembly>
    <members>
        <member name="T:BaseModule.Axis">
            <summary>
            Summary description for Axis class.
            </summary>
        </member>
        <member name="T:BaseModule.SystemResponsePublisher">
            <summary>
            Object of this class is used to publish Response events; Done and Error
            </summary>
            
        </member>
        <member name="M:BaseModule.SystemResponsePublisher.subscribeMeToResponseEvents(BaseModule.SystemResponseSubscriber)">
            <summary>
            Subscribers will use this method to subscirbe to Response events.
            Subscribers type is SystemResponseSubscriber
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:BaseModule.SystemResponsePublisher.unSubscribeMeFromResponseEvents(BaseModule.SystemResponseSubscriber)">
            <summary>
            Use this method to unsubscibe from Response events
            Subscribers type is SystemResponseSubscriber
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:BaseModule.SystemResponsePublisher.notifyDoneEventSubscribers(System.Object,BaseModule.StateEventArgs)">
            <summary>
            Use this method to publish 'Done' Response event.
            Source of event is any object that pucblishes the event
            Publisher need to supply a StateEventArgs.
            </summary>
            <param name="source"></param>
            <param name="EventArgs"></param>
        </member>
        <member name="M:BaseModule.SystemResponsePublisher.notifyErrorEventSubscribers(System.Object,BaseModule.FailureException)">
            <summary>
            Use this method to publish 'Error' Response event.
            Source of event is any object that pucblishes the event
            Publisher need to supply a FailureException.
            </summary>
            <param name="source"></param>
            <param name="EventArgs"></param>
        </member>
        <member name="T:BaseModule.SystemResponseSubscriber">
            <summary>
            Summary description for SystemResponseSubscriber.
            </summary>
        </member>
        <member name="T:BaseModule.Position">
            <summary>
            Summary description for Axis class.
            </summary>
        </member>
        <member name="T:BaseModule.PneumaticPosition">
            <summary>
            Summary description for PneumaticPosition.
            </summary>
        </member>
        <member name="T:BaseModule.BaseController">
            <summary>
            all system controller (MVC) should inheirate from this base class
            it implements the SystemPublisher notification of events
            </summary>
        </member>
        <member name="T:BaseModule.SystemSubscriber">
            <summary>
            Basic interface for subsystem
            </summary>
            
        </member>
        <member name="M:BaseModule.BaseController.genericSystemEventHandler(System.Object,BaseModule.GenericSystemEventArgs)">
            <summary>
            Handles generic Events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:BaseModule.BaseGroup">
            <summary>
            Summary description for IGroup.
            </summary>
        </member>
        <member name="T:BaseModule.BaseRetryCounter">
            <summary>
            Summary description for BaseRetryCounter.
            </summary>
        </member>
        <member name="T:BaseModule.SMAction">
            <summary>
            Summary description for SMAction.
            </summary>
        </member>
        <member name="T:BaseModule.BaseState">
            <summary>
            Summary description for BaseState.
            </summary>
        </member>
        <member name="T:BaseModule.IState">
            <summary>
            Summary description for IState.
            </summary>
            
        </member>
        <member name="M:BaseModule.BaseState.genericSystemEventHandler(System.Object,BaseModule.GenericSystemEventArgs)">
            <summary>
            Used to handle the "customizable" buttons on the main screen.
            </summary>
        </member>
        <member name="T:BaseModule.StateEventArgs">
            <summary>
            Object of this class is used as argument for publishing Done event.
            
            </summary>
        </member>
        <member name="P:BaseModule.StateEventArgs.eventName">
            <summary>
            Assign evnet name  
            </summary>
        </member>
        <member name="P:BaseModule.StateEventArgs.eventInfo">
            <summary>
            Additional description for a Done event can be assigned to eventInfo
            </summary>
        </member>
        <member name="P:BaseModule.StateEventArgs.eventObject">
            <summary>
            Any object can be assined to publish more details for Done event
            </summary>
        </member>
        <member name="P:BaseModule.StateEventArgs.stackBase">
            <summary>
            Not intended for user use
            </summary>
        </member>
        <member name="T:BaseModule.RetryEventHandler">
            <summary>
            Summary description for StateMachineUtil.
            </summary>
            
        </member>
        <member name="T:BaseModule.IGroupMember">
            <summary>
            Summary description for IGroupMember.
            </summary>
        </member>
        <member name="M:BaseModule.BaseStateMachine.buildClasses(System.String,System.String,System.String)">
            <summary>
            write skeleton code for states of the stateMachine that is not
            written yet.
            the file name will be made up by dropping the "Machine" from the state machine name and
            adding "s" at the end.
            example: RobotHomingStateMachine the file for states will be in RobotHomingStates.
            </summary>
            <param name="stateMachineName"></param>
        </member>
        <member name="T:BaseModule.BaseStateTimer">
            <summary>
            Summary description for StateTimer.
            </summary>
        </member>
        <member name="M:BaseModule.BaseStateTimer.setTimerTo(System.Int32)">
            <summary>
            Sets a time interval for state timeouts
            </summary>
        </member>
        <member name="M:BaseModule.BaseStateTimer.setTimerTo(System.Int32,BaseModule.BaseStateTimer.TimerExpiredEventHandler)">
            <summary>
            Sets a time interval for state timeouts and adds user event handler to the list
            </summary>
        </member>
        <member name="P:BaseModule.BaseStateTimer.autoRetrigger">
            <summary>
            Gets sets timer auto-retigger (free-run) mode
            </summary>
        </member>
        <member name="T:BaseModule.BlinkTimer">
            <summary>
            Summary description for BlinkTimer class
            </summary>
        </member>
        <member name="T:BaseModule.CCommPort">
            <summary>
            Serial Port Communications using MarshallSoft WSC32.dll
            </summary>
        </member>
        <member name="T:BaseModule.DataGridColoredTextBoxColumn">
            <summary>
            Summary description for ColumnStyle.
            </summary>
        </member>
        <member name="T:BaseModule.GetButtonColor">
            <summary>
            Summary description for ColumnStyle.
            </summary>
        </member>
        <member name="T:BaseModule.DataGridStyle">
            <summary>
            Summary description for DataGridStyle.
            </summary>
        </member>
        <member name="M:BaseModule.DataGridStyle.addPopupSelectionForColumn(System.String,System.Data.DataTable)">
            <summary>
            Adds a pop-up (dropdown) selection box to column 
            </summary>
            <param name="columnName"></param>
            <param name="sourceTable = DataTab;e containing choices"></param>
        </member>
        <member name="M:BaseModule.DataGridStyle.addPopupSelectionForColumn(System.String,System.Collections.ArrayList)">
            <summary>
            Adds a pop-up (dropdown) selection box to column
            </summary>
            <param name="columnName"></param>
            <param name="choices = ArrayList containng choices"></param>
        </member>
        <member name="M:BaseModule.DataGridStyle.addCheckBoxForColumn(System.String)">
            <summary>
            Adds a checkbox to column
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:BaseModule.DataGridStyle.addColorTextBoxForColumn(System.String,System.Collections.Hashtable)">
            <summary>
            Adds a colored background textbox to column
            </summary>
        </member>
        <member name="M:BaseModule.DataGridStyle.addColorTextBoxAndButtonForColumn(System.String,System.Collections.Hashtable)">
            <summary>
            Adds a button and a colored background textbox to column
            </summary>
        </member>
        <member name="M:BaseModule.DataGridStyle.addCenteredTextForColumn(System.String)">
            <summary>
            Adds a horizontally centered text to column
            </summary>
        </member>
        <member name="M:BaseModule.DataGridStyle.fitDataGridToPanel">
            <summary>
            Fits DataGrid horizontally to parent if it is a panel
            </summary>
        </member>
        <member name="T:BaseModule.DataMonitor">
            <summary>
            Data Monitor Controller Interface.
            </summary>
        </member>
        <member name="M:BaseModule.DataMonitor.addDataMonitor(System.String,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Create new data monitor.
            </summary>
            <param name="monitoringName"></param>
            <param name="windowSize"></param>
            <param name="target"></param>
            <param name="lowerSpec"></param>
            <param name="upperSpec"></param>
        </member>
        <member name="M:BaseModule.DataMonitor.addDataMonitor(System.String,System.Int32,System.Int32,System.Double,System.Double,BaseModule.DataMonitorAction)">
            <summary>
            Create new data monitor with action(enum).
            </summary>
            <param name="monitoringName"></param>
            <param name="windowSize"></param>
            <param name="target"></param>
            <param name="lowerSpec"></param>
            <param name="upperSpec"></param>
        </member>
        <member name="M:BaseModule.DataMonitor.addDataMonitor(System.String,System.Int32,System.Int32,System.Double,System.Double,System.String)">
            <summary>
            Create new data monitor with action(string).
            </summary>
            <param name="monitoringName"></param>
            <param name="windowSize"></param>
            <param name="target"></param>
            <param name="lowerSpec"></param>
            <param name="upperSpec"></param>
        </member>
        <member name="M:BaseModule.DataMonitor.resetAllMonitoring">
            <summary>
            Reset all monitoring counter
            </summary>
        </member>
        <member name="M:BaseModule.DataMonitor.reset(System.String)">
            <summary>
            reset monitoring counter
            </summary>
            <param name="monitoringName"></param>
        </member>
        <member name="M:BaseModule.DataMonitor.inputData(System.String,System.Double,System.Boolean@)">
            <summary>
            Input your monitoring data - with target reached return.
            </summary>
            <param name="monitoringName"></param>
            <param name="data"></param>
            <param name="meetTarget"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.DataMonitor.inputData(System.String,System.Double)">
            <summary>
            Input your monitoring data.
            </summary>
            <param name="monitoringName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.DataMonitor.isTargetMet(System.String)">
            <summary>
            check monitor status.
            </summary>
            <param name="monitoringName"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.DataMonitor.getCurrentAction(System.String)">
            <summary>
            get current action 
            </summary>
            <param name="monitoringName"></param>
            <returns></returns>
        </member>
        <member name="T:BaseModule.Monitor">
            <summary>
            Data Monitoring.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.WDDeviceInfo.#ctor(BaseModule.DualOps.InterfaceType,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor of WDDeviceInfo
            </summary>
            <param name="type">Type of Interface eg..Serial Port, TCP/IP, UDP..</param>
            <param name="PortName">Port Name such as "COM1"</param>
            <param name="PortNumber">Number of Port for TCP or UDP</param>
            <param name="isShareDevice">Device manager will use this flag to keep track if there is any conflic</param>
        </member>
        <member name="M:BaseModule.DualOps.WDDeviceInfo.#ctor">
            <summary>
            Blank constructor of WDDeviceInfo class.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.WDDeviceInfo.ToString">
            <summary>
            Return information of Device and how it is connect
            For example: UDP:172.1.1.10:5001
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseModule.DualOps.WDDeviceInfo.isConflict(BaseModule.DualOps.WDDeviceInfo)">
            <summary>
            Implement method to check if it device is Confic with other same device.
            </summary>
            <param name="anotherDevice"></param>
            <returns></returns>
        </member>
        <member name="P:BaseModule.DualOps.WDDeviceInfo.PortName">
            <summary>
            return the Name of Port.
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDeviceInfo.PortNumber">
            <summary>
            Return the Number of Port for TCP or UDP.
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDeviceInfo.DeviceType">
            <summary>
            Return the device interface type.
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDeviceInfo.IsShareDevice">
            <summary>
            Return the flag to indicate if the resource for this device is shareable.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.DigitalInputInfo.#ctor(System.String,System.String)">
            <summary>
            Create Digital Input info from Data Base
            </summary>
            <param name="inputName"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:BaseModule.DualOps.DeviceInfoClass.DigitalOutputInfo.#ctor(System.String,System.String)">
            <summary>
            Create Digital Input info from Data Base
            </summary>
            <param name="inputName"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:BaseModule.DualOps.TCPInfo.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructor for TCPInfo class
            </summary>
            <param name="ipAddress">IP Address of device</param>
            <param name="port">TCP Port Number</param>
        </member>
        <member name="M:BaseModule.DualOps.TCPInfo.#ctor(System.Object,System.String)">
            <summary>
            Create UDP interface info class from Data Base.
            </summary>
            <param name="dbBase"></param>
        </member>
        <member name="M:BaseModule.DualOps.UDPInfo.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructor class for UDP type device
            </summary>
            <param name="ipAddress">IP Address of UDP Device</param>
            <param name="port">UDP Port</param>
        </member>
        <member name="M:BaseModule.DualOps.UDPInfo.#ctor(System.Object,System.String)">
            <summary>
            Create UDP interface info class from Data Base.
            </summary>
            <param name="dbBase"></param>
        </member>
        <member name="M:BaseModule.DualOps.UDPInfo.isConflict(BaseModule.DualOps.WDDeviceInfo)">
            <summary>
            Implementation of isConflict method for UDP Device
            </summary>
            <param name="anotherDevice">Device to be checked</param>
            <returns>True: If there is conflic with checking device
            False: There is no conflic with checking device
            </returns>
        </member>
        <member name="T:BaseModule.DualOps.DeviceManager">
            <summary>
            Instance class to list all device in our WD Tool
            Note: The device has to inherit from WDDevice class.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.DeviceManager.RegisterDevice(BaseModule.DualOps.WDDevice)">
            <summary>
            Add Device into Device manager
            </summary>
            <param name="myDevice">Device to be added to DeviceManager</param>
        </member>
        <member name="P:BaseModule.DualOps.DeviceManager.View">
            <summary>
            Return the view of Device Manager
            </summary>
        </member>
        <member name="F:BaseModule.DualOps.DeviceManagerView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.DeviceManagerView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BaseModule.DualOps.DeviceManagerView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.WDDevice.#ctor(System.String,BaseModule.DualOps.WDDeviceInfo)">
            <summary>
            Create the WD Base device
            </summary>
            <param name="name">Name of Device the format is 'Location.Name' </param>
            <param name="info">Device information such as type of hardware interface.. </param>
        </member>
        <member name="M:BaseModule.DualOps.WDDevice.#ctor">
            <summary>
            This class is designed to create the blank device.. It should be call by WDDevice derived class only.
            If you want to register your device to Device Manager then use this method when you derive the class
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.WDDevice.RegisterDevice">
            <summary>
            Use this method to include your WDDevice inside DeviceManager
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.WDDevice.GetFullDevicePath">
            <summary>
            Return the path name of Device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseModule.DualOps.WDDevice.AddSubDevice(BaseModule.DualOps.WDDevice)">
            <summary>
            Include the SubDevice into you main device
            </summary>
            <param name="subDevice">Sub Device to be added</param>
        </member>
        <member name="M:BaseModule.DualOps.WDDevice.SetField``1(``0@,``0,System.String)">
            <summary>
            This method is to update the binding source table inside device manager.. 
            </summary>
            <typeparam name="T">Parameter type</typeparam>
            <param name="field">Reference paramter</param>
            <param name="value">Value to be updated to ref parameter</param>
            <param name="propertyName">Name of property to be updated</param>
            <returns></returns>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.SubDeviceCount">
            <summary>
            Return number of Sub Devices count
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.SubDevices">
            <summary>
            Return the List of Sub-Device.
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.MasterDevice">
            <summary>
            Return the Master Device of Sub Device.
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.Location">
            <summary>
            Return Location name of Device
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.Name">
            <summary>
            Return Name of Deivice
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.GetDeviceType">
            <summary>
            Return Device type
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.InterfaceInfo">
            <summary>
            Return information what type and connection of device
            </summary>
        </member>
        <member name="P:BaseModule.DualOps.WDDevice.VendorName">
            <summary>
            Return the Vendor name of this device
            </summary>
        </member>
        <member name="T:BaseModule.DualOps.WDDeviceController">
            <summary>
            WDDeviceController is designed for device that has sub devices.
            </summary>
        </member>
        <member name="M:BaseModule.DualOps.WDDeviceController.GetSubDeviceListBy(BaseModule.DualOps.WDDeviceType)">
            <summary>
            Search the list for that particular device type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:BaseModule.FailureExceptionManager">
            <summary>
            FailureException is a class used for normal error notification.  
            It is also used as wrapper class for wrapping different exceptions. 
            There are 9 overloaded constructor for this class to suit different usage.
            </summary>
            
        </member>
        <member name="M:BaseModule.FailureExceptionManager.buildEnvironmentInfo">
            <summary>
            build environment information string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BaseModule.FailureExceptionManager.environmentInfo">
            <summary>
            contains os version, .net revision
            </summary>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String)">
            <summary>
            Create FailureException by a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.Exception)">
            <summary>
            Wrap caught exception wiht FailureException 
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,BaseModule.Error)">
            <summary>
            Create FailureException by a message and assign an error leve to it
            Error levels are Fatal,	Severe, and Warning.
            
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,System.String)">
            <summary>
            serrialNumber is that of a drive
            </summary>
            <param name="message"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,System.String,BaseModule.Error)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="serialNumber"></param>
            <param name="level"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,System.Exception)">
            <summary>
            Create FailureException by a message and pass the caught exception as inner 
            exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,System.String,System.String,BaseModule.Error)">
            <summary>
            FailureException with associated fcode and gcode
            </summary>
            <param name="message"></param>
            <param name="fcode"></param>
            <param name="gcode"></param>
            <param name="level"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,System.String,System.String)">
            <summary>
            Create FailureException with known gCode and fcode descriptions
            </summary>
            <param name="messageOrGdescription"></param>
            <param name="fDescription"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:BaseModule.FailureException.#ctor(System.String,System.String,System.String,BaseModule.Error,System.String)">
            <summary>
            
            </summary>
            <param name="messageOrGdescription"></param>
            <param name="fcode"></param>
            <param name="gcode"></param>
            <param name="level"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:BaseModule.FailureException.displayException">
            <summary>
            Mehtod displays a dialog exception with buttun option set in displayButtonOption property
            The default button is Continue.
            Displaying a FailureException will automatically log the exception in ExceptionLog
            </summary>
        </member>
        <member name="M:BaseModule.FailureException.displayException(BaseModule.DisplayButton)">
            <summary>
            Mehtod displays a dialog exception with the button/s indicated.
            choices of buttons are Continue, Retry, Exit, Retry and Exit, Continue and Exit.
            Displaying a FailureException will automatically log the exception in ExceptionLog
            </summary>
            <param name="displayButton"></param>
        </member>
        <member name="M:BaseModule.FailureException.displayException(BaseModule.DisplayButton,System.String)">
            <summary>
            Mehtod displays a dialog exception with the button/s indicated.
            choices of buttons are Continue, Retry, Exit, Retry and Exit, Continue and Exit.
            Any instruction or corrective action that user needs to know should be passed 
            as string for correctiveAction argument. 
            Displaying a FailureException will automatically log the exception in ExceptionLog		
            </summary>
            <param name="displayButton"></param>
            <param name="correctiveAction"></param>
        </member>
        <member name="M:BaseModule.FailureException.logExceptionToFile">
            <summary>
            logs this FailureException object to ExceptionLog File.  
            If you display the exception you already logging it to file too, don't log it twice
            </summary>
        </member>
        <member name="M:BaseModule.FailureException.setupRetry(System.Object,System.String,System.Object[])">
            <summary>
            This method needs to be called before displaying exception dialog with 'Retry' button.  
            It need the object reference that holds the method that needs to be called when
            Retry button is clicked.  Pass method name and required argument in an array of objects
            </summary>
            <param name="retryObject"></param>
            <param name="methodName"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="P:BaseModule.FailureException.displayButtonOption">
            <summary>
            This property selects button/s to display in ExceptionDialog. 
            This property is only used when overloaded method (no argument)
            displayException() is called.  Use it to select which button/s
            to be shown and not display dialog immediately. 
            Example: Create exceptions and throw/re-throw them at other layers
            but display it once in central top layer. 
            </summary>
            
        </member>
        <member name="P:BaseModule.FailureException.stackBase">
            <summary>
            Not intended for user use
            </summary>
        </member>
        <member name="T:BaseModule.FileEncryption">
            <summary>
            Summary description for FileEncryption.
            </summary>
            
        </member>
        <member name="M:BaseModule.FileEncryption.ReadEncryptedFile(System.String)">
            <summary>
            Return string with content of encrypted file
            </summary>
            <param name="fileName"></param>
            <returns>name of encrypted file</returns>
        </member>
        <member name="T:BaseModule.FileUtil">
            <summary>
            File utility function.
            </summary>
        </member>
        <member name="M:BaseModule.FileUtil.GetCurrentDirectory">
            <summary>
            Get Current Path from executing assembly. you should not use Directory.GetCurrentDirectory() because it can adjust location in shortcut
            </summary>
            <returns></returns>
        </member>
        <member name="T:BaseModule.Form1">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="M:BaseModule.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:BaseModule.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BaseModule.Form1.Form1_Load(System.Object,System.EventArgs)">
            <summary>
            The main entry point for the application.
            </summary>
            
        </member>
        <member name="T:BaseModule.FormConfirmationDialog">
            <summary>
            Summary description for FormConfirmationDialog.
            </summary>
        </member>
        <member name="M:BaseModule.FormConfirmationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:BaseModule.FormConfirmationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BaseModule.FormMonitor">
            <summary>
            Summary description for FormMonitor.
            </summary>
        </member>
        <member name="M:BaseModule.FormMonitor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:BaseModule.FormMonitor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BaseModule.GroupEventMonitor">
            <summary>
            Summary description for GroupEventMonitor.
            </summary>
        </member>
        <member name="T:BaseModule.IAction">
            <summary>
            Summary description for IAction.
            </summary>
        </member>
        <member name="T:BaseModule.IConvert">
            <summary>
            Summary description for IConvert.
            </summary>
        </member>
        <member name="T:BaseModule.IntervalTimer">
            <summary>
            Summary description for IntervalTimer.
            </summary>
            
        </member>
        <member name="T:BaseModule.ListComboBox">
            <summary>
            Summary description for UserControl.
            </summary>
        </member>
        <member name="F:BaseModule.ListComboBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BaseModule.ListComboBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:BaseModule.ListComboBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BaseModule.MainGuiFrame">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="M:BaseModule.MainGuiFrame.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:BaseModule.MainGuiFrame.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BaseModule.MainGuiFrame.Form1_Load(System.Object,System.EventArgs)">
            <summary>
            The main entry point for the application.
            </summary>
            
        </member>
        <member name="T:BaseModule.Message">
            <summary>
            Summary description for Message.
            </summary>
        </member>
        <member name="T:BaseModule.SerialDevice">
            <summary>
            Summary description for SerialDevice.
            </summary>
        </member>
        <member name="T:BaseModule.SerialDeviceComPort">
            <summary>
            KJ Change to use .NET Serial Port..
            </summary>
            
        </member>
        <member name="M:BaseModule.SerialDeviceComPort.#ctor">
            <summary>
            Makes a Com port, given the device name and the config file that holds the settings
            </summary>
            <param name="serialDeviceName"></param>
            <param name="configFileName"></param>
        </member>
        <member name="M:BaseModule.SerialDeviceComPort.initDOTNET">
            <summary>
            Replace the old serial port with .NET serial.
            </summary>
        </member>
        <member name="M:BaseModule.SerialDeviceComPort.writeToComPort(System.String)">
            <summary>
            Writes string to the serial port input
            </summary>
        </member>
        <member name="M:BaseModule.SerialDeviceComPort.writeToComPortByOneChar(System.String)">
            <summary>
            Writes string to the serial port input. used for Varian leak test
            </summary>
        </member>
        <member name="M:BaseModule.SerialDeviceComPort.writeToComPort(System.String,System.String)">
            <summary>
            Writes string to the serial port input
            </summary>
        </member>
        <member name="T:BaseModule.SimpleElements">
            <summary>
            Summary description for SimpleElements.
            </summary>
        </member>
        <member name="T:BaseModule.StatesMonitor">
            <summary>
            Summary description for StatesMonitor.
            </summary>
        </member>
        <member name="M:BaseModule.StatesMonitor._monitorView_ParentChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the main form is made visible.
            </summary>
        </member>
        <member name="M:BaseModule.StatesMonitor.monitorView_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the maintenance view is painted.
            Used to start first time initialization of maintenance view.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BaseModule.StatesMonitor.Parent_Paint(System.Object,System.Windows.Forms.PaintEventArgs)" -->
        <member name="M:BaseModule.StatesMonitor.getStateMachine(System.String)">
            <summary>
            Returns a BaseStateMachine object given a statemachine name.
            Returns null if stateMachineName is not in stateMachines collection.
            </summary>
            <param name="stateMachineName"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.StatesMonitor.addStateMachine(BaseModule.BaseStateMachine)">
            <summary>
            Adds a statemachine to statemachine list and subscribes it to StateChange events
            If statemachine name is already in list, the name is appended with -n where n is 
            the number of copies of statemachines with the same name.
            </summary>
            <param name="stateMachine"></param>
        </member>
        <member name="M:BaseModule.StatesMonitor.addStateMachinesToTable">
            <summary>
            Adds stateMachine and its states to the monitorTable dataTable
            </summary>
            <param name="stateMachine"></param>
        </member>
        <member name="M:BaseModule.StatesMonitor.fillStateMachineList(System.Data.DataTable)">
            <summary>
            Writes the statemachines names, state names, and selection status to xml file
            Creates the appropriate nodes if they do not exist in the file, selection "No").
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:BaseModule.StatesMonitor.fillMachineViewSelectionTable">
            <summary>
            Fill a table with a sorted list of statemachine names and selection status
            </summary>
        </member>
        <member name="M:BaseModule.StatesMonitor.fillMonitorListView">
            <summary>
            Fille
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BaseModule.StatesMonitor.refreshStatesButton_Click(System.Object,System.EventArgs)" -->
        <member name="T:BaseModule.IStateTimer">
            <summary>
            Summary description for StateTimer.
            </summary>
        </member>
        <member name="M:BaseModule.IStateTimer.setTimerTo(System.Int32)">
            <summary>
            Sets a time interval for state timeouts
            </summary>
        </member>
        <member name="M:BaseModule.IStateTimer.setTimerTo(System.Int32,BaseModule.IStateTimer.TimerExpiredEventHandler)">
            <summary>
            Sets a time interval for state timeouts
            </summary>
        </member>
        <member name="T:BaseModule.StateTransition">
            <summary>
            Summary description for StateTransition.
            </summary>
        </member>
        <member name="M:BaseModule.SystemEventWatcher.eventLogEventRead(System.Object,System.Diagnostics.EntryWrittenEventArgs)">
            <summary>
            Callback method that gets executed when an event is
            reported to the subscription.
            </summary>
        </member>
        <member name="T:BaseModule.SystemPublisher">
            <summary>
            Summary description for SystemPublisher.
            </summary>
        </member>
        <member name="M:BaseModule.GenericSystemEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="eventName"></param>
            <param name="eventType"></param>
            <param name="data"></param>
        </member>
        <member name="T:BaseModule.MessageReceivedHandler">
            <summary>
            Summary description for TCPsocketCommunication.
            </summary>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.tryConnectAndSend(System.String,System.String,System.String,BaseModule.FailureException@)">
            <summary>
            make a new connection then send
            </summary>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.connect(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method will try connecting and will show excepion if not successful after
            number of retries given by 'NumberOfRetries' 
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="NumberOfRetries"></param>
            <param name="TimeOutMilliSecons"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.receiveFromSocket(BaseModule.TCPsocketCommunication.StateObject)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.send(System.String,System.String,System.String)">
            <summary>
            make a new connection then send
            </summary>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.connectAndSend(System.String,System.String,System.String)">
            <summary>
            make a new connection then send
            </summary>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.send(System.String,System.String,System.Byte[])">
            <summary>
            Make a new connection then send
            </summary>
        </member>
        <member name="M:BaseModule.TCPsocketCommunication.OnServerDataReceived(System.IAsyncResult)">
            <summary>
            Server (this computer is server) recieved message
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:BaseModule.MVC_Socket.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:BaseModule.UpdateUtil">
            <summary>
            Summary description for UpdateUtil.
            </summary>
        </member>
        <member name="M:BaseModule.UpdateUtil.registerForRuntimeUpdate(System.Type,System.Object)">
            <summary>
            All objects that have process or tooling parameter that need to be effected should register for dynamic update
            </summary>
            <param name="type"></param>
            <param name="registeredObject"></param>
        </member>
        <member name="T:BaseModule.GDI32">
            <summary>
            GDI32 dll access
            </summary>
        </member>
        <member name="T:BaseModule.USER32">
            <summary>
            USER32 dll access
            </summary>
        </member>
        <member name="T:BaseModule.Validator">
            <summary>
            This is a utility class with methods to validate an argument. 
            It can check for null argument, empty string argument, and validate an int or double argument for the range 
            </summary>
            
        </member>
        <member name="M:BaseModule.Validator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BaseModule.Validator.checkForNull(System.Object,System.String)">
            <summary>
            Checks the argument and throws ArgumentNullException exception if null.
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:BaseModule.Validator.checkForNullAndEmptyString(System.String,System.String)">
            <summary>
            Checks the argument and throws ArgumentNullException exception if null and ArgumentException if empty.
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:BaseModule.Validator.checkForInTheRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Checks an integer argument. if it is not within the range min-max, it throws ArgumentOutOfRangeException exception.
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:BaseModule.Validator.checkForInTheRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Checks an double argument. if it is not within the range min-max, it throws ArgumentOutOfRangeException exception.
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
        </member>
        <member name="T:BaseModule.VersionInfo">
            <summary>
            Summary description for VersionInfo.
            </summary>
        </member>
        <member name="T:BaseModule.WDDateTime">
            <summary>
            Summary description for WDDateTime.
            </summary>
        </member>
        <member name="M:BaseModule.WindowSnap.GetWindowSnap(System.IntPtr,System.Boolean)">
            <summary>
            Take a Snap from the specific Window
            </summary>
            <param name="hWnd">Handle of the Window</param>
            <param name="useSpecialCapturing">if you need to capture from the minimized windows set it true,otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.WindowSnap.ToString">
            <summary>
            Gets the Name and Handle of the Snapped Window
            </summary>
            <returns></returns>
        </member>
        <member name="P:BaseModule.WindowSnap.ForceMDICapturing">
            <summary>
            if is true ,will force the mdi child to be captured completely ,maybe incompatible with some programs
            </summary>
        </member>
        <member name="P:BaseModule.WindowSnap.Image">
            <summary>
            Get the Captured Image of the Window
            </summary>
        </member>
        <member name="P:BaseModule.WindowSnap.Size">
            <summary>
            Get Size of Snapped Window
            </summary>
        </member>
        <member name="P:BaseModule.WindowSnap.Location">
            <summary>
            Get Location of Snapped Window
            </summary>
        </member>
        <member name="P:BaseModule.WindowSnap.Text">
            <summary>
            Get Title of Snapped Window
            </summary>
        </member>
        <member name="P:BaseModule.WindowSnap.Handle">
            <summary>
            Get Handle of Snapped Window
            </summary>
        </member>
        <member name="P:BaseModule.WindowSnap.IsMinimized">
            <summary>
            if the state of the window is minimized return true otherwise returns false
            </summary>
        </member>
        <member name="P:BaseModule.XPAppearance.MinAnimate">
            <summary>
            Gets or Sets MinAnimate Effect
            </summary>
        </member>
        <member name="T:BaseModule.XPAppearance.ANIMATIONINFO">
            <summary>
            ANIMATIONINFO specifies animation effects associated with user actions. 
            Used with SystemParametersInfo when SPI_GETANIMATION or SPI_SETANIMATION action is specified.
            </summary>
            <remark>
            The uiParam value must be set to (System.UInt32)Marshal.SizeOf(typeof(ANIMATIONINFO)) when using this structure.
            </remark>
        </member>
        <member name="M:BaseModule.XPAppearance.ANIMATIONINFO.#ctor(System.Boolean)">
            <summary>
            Creates an AMINMATIONINFO structure.
            </summary>
            <param name="iMinAnimate">If non-zero and SPI_SETANIMATION is specified, enables minimize/restore animation.</param>
        </member>
        <member name="F:BaseModule.XPAppearance.ANIMATIONINFO.cbSize">
            <summary>
            Always must be set to (System.UInt32)Marshal.SizeOf(typeof(ANIMATIONINFO)).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.ANIMATIONINFO.iMinAnimate">
            <summary>
            If non-zero, minimize/restore animation is enabled, otherwise disabled.
            </summary>
        </member>
        <member name="T:BaseModule.XPAppearance.SPI">
            <summary>
            SPI_ System-wide parameter - Used in SystemParametersInfo function 
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETBEEP">
            <summary>
            Determines whether the warning beeper is on. 
            The pvParam parameter must point to a BOOL variable that receives TRUE if the beeper is on, or FALSE if it is off.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETBEEP">
            <summary>
            Turns the warning beeper on or off. The uiParam parameter specifies TRUE for on, or FALSE for off.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSE">
            <summary>
            Retrieves the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSE">
            <summary>
            Sets the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETBORDER">
            <summary>
            Retrieves the border multiplier factor that determines the width of a window's sizing border. 
            The pvParam parameter must point to an integer variable that receives this value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETBORDER">
            <summary>
            Sets the border multiplier factor that determines the width of a window's sizing border. 
            The uiParam parameter specifies the new value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETKEYBOARDSPEED">
            <summary>
            Retrieves the keyboard repeat-speed setting, which is a value in the range from 0 (approximately 2.5 repetitions per second) 
            through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from 
            a linear scale by as much as 20%. The pvParam parameter must point to a DWORD variable that receives the setting
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETKEYBOARDSPEED">
            <summary>
            Sets the keyboard repeat-speed setting. The uiParam parameter must specify a value in the range from 0 
            (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). 
            The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. 
            If uiParam is greater than 31, the parameter is set to 31.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_LANGDRIVER">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_ICONHORIZONTALSPACING">
            <summary>
            Sets or retrieves the width, in pixels, of an icon cell. The system uses this rectangle to arrange icons in large icon view. 
            To set this value, set uiParam to the new value and set pvParam to null. You cannot set this value to less than SM_CXICON.
            To retrieve this value, pvParam must point to an integer that receives the current value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSCREENSAVETIMEOUT">
            <summary>
            Retrieves the screen saver time-out value, in seconds. The pvParam parameter must point to an integer variable that receives the value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSCREENSAVETIMEOUT">
            <summary>
            Sets the screen saver time-out value to the value of the uiParam parameter. This value is the amount of time, in seconds, 
            that the system must be idle before the screen saver activates.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSCREENSAVEACTIVE">
            <summary>
            Determines whether screen saving is enabled. The pvParam parameter must point to a bool variable that receives TRUE 
            if screen saving is enabled, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSCREENSAVEACTIVE">
            <summary>
            Sets the state of the screen saver. The uiParam parameter specifies TRUE to activate screen saving, or FALSE to deactivate it.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETGRIDGRANULARITY">
            <summary>
            Retrieves the current granularity value of the desktop sizing grid. The pvParam parameter must point to an integer variable 
            that receives the granularity.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETGRIDGRANULARITY">
            <summary>
            Sets the granularity of the desktop sizing grid to the value of the uiParam parameter.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDESKWALLPAPER">
            <summary>
            Sets the desktop wallpaper. The value of the pvParam parameter determines the new wallpaper. To specify a wallpaper bitmap, 
            set pvParam to point to a null-terminated string containing the name of a bitmap file. Setting pvParam to "" removes the wallpaper. 
            Setting pvParam to SETWALLPAPER_DEFAULT or null reverts to the default wallpaper.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDESKPATTERN">
            <summary>
            Sets the current desktop pattern by causing Windows to read the Pattern= setting from the WIN.INI file.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETKEYBOARDDELAY">
            <summary>
            Retrieves the keyboard repeat-delay setting, which is a value in the range from 0 (approximately 250 ms delay) through 3 
            (approximately 1 second delay). The actual delay associated with each value may vary depending on the hardware. The pvParam parameter must point to an integer variable that receives the setting.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETKEYBOARDDELAY">
            <summary>
            Sets the keyboard repeat-delay setting. The uiParam parameter must specify 0, 1, 2, or 3, where zero sets the shortest delay 
            (approximately 250 ms) and 3 sets the longest delay (approximately 1 second). The actual delay associated with each value may 
            vary depending on the hardware.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_ICONVERTICALSPACING">
            <summary>
            Sets or retrieves the height, in pixels, of an icon cell. 
            To set this value, set uiParam to the new value and set pvParam to null. You cannot set this value to less than SM_CYICON.
            To retrieve this value, pvParam must point to an integer that receives the current value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETICONTITLEWRAP">
            <summary>
            Determines whether icon-title wrapping is enabled. The pvParam parameter must point to a bool variable that receives TRUE 
            if enabled, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETICONTITLEWRAP">
            <summary>
            Turns icon-title wrapping on or off. The uiParam parameter specifies TRUE for on, or FALSE for off.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMENUDROPALIGNMENT">
            <summary>
            Determines whether pop-up menus are left-aligned or right-aligned, relative to the corresponding menu-bar item. 
            The pvParam parameter must point to a bool variable that receives TRUE if left-aligned, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMENUDROPALIGNMENT">
            <summary>
            Sets the alignment value of pop-up menus. The uiParam parameter specifies TRUE for right alignment, or FALSE for left alignment.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDOUBLECLKWIDTH">
            <summary>
            Sets the width of the double-click rectangle to the value of the uiParam parameter. 
            The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered 
            as a double-click.
            To retrieve the width of the double-click rectangle, call GetSystemMetrics with the SM_CXDOUBLECLK flag.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDOUBLECLKHEIGHT">
            <summary>
            Sets the height of the double-click rectangle to the value of the uiParam parameter. 
            The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered 
            as a double-click.
            To retrieve the height of the double-click rectangle, call GetSystemMetrics with the SM_CYDOUBLECLK flag.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETICONTITLELOGFONT">
            <summary>
            Retrieves the logical font information for the current icon-title font. The uiParam parameter specifies the size of a LOGFONT structure, 
            and the pvParam parameter must point to the LOGFONT structure to fill in.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDOUBLECLICKTIME">
            <summary>
            Sets the double-click time for the mouse to the value of the uiParam parameter. The double-click time is the maximum number 
            of milliseconds that can occur between the first and second clicks of a double-click. You can also call the SetDoubleClickTime 
            function to set the double-click time. To get the current double-click time, call the GetDoubleClickTime function.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSEBUTTONSWAP">
            <summary>
            Swaps or restores the meaning of the left and right mouse buttons. The uiParam parameter specifies TRUE to swap the meanings 
            of the buttons, or FALSE to restore their original meanings.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETICONTITLELOGFONT">
            <summary>
            Sets the font that is used for icon titles. The uiParam parameter specifies the size of a LOGFONT structure, 
            and the pvParam parameter must point to a LOGFONT structure.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFASTTASKSWITCH">
            <summary>
            This flag is obsolete. Previous versions of the system use this flag to determine whether ALT+TAB fast task switching is enabled. 
            For Windows 95, Windows 98, and Windows NT version 4.0 and later, fast task switching is always enabled.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFASTTASKSWITCH">
            <summary>
            This flag is obsolete. Previous versions of the system use this flag to enable or disable ALT+TAB fast task switching. 
            For Windows 95, Windows 98, and Windows NT version 4.0 and later, fast task switching is always enabled.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDRAGFULLWINDOWS">
            <summary>
            Sets dragging of full windows either on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. 
            Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETDRAGFULLWINDOWS">
            <summary>
            Determines whether dragging of full windows is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if enabled, or FALSE otherwise. 
            Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETNONCLIENTMETRICS">
            <summary>
            Retrieves the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point 
            to a NONCLIENTMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter 
            to sizeof(NONCLIENTMETRICS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETNONCLIENTMETRICS">
            <summary>
            Sets the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point 
            to a NONCLIENTMETRICS structure that contains the new parameters. Set the cbSize member of this structure 
            and the uiParam parameter to sizeof(NONCLIENTMETRICS). Also, the lfHeight member of the LOGFONT structure must be a negative value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMINIMIZEDMETRICS">
            <summary>
            Retrieves the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(MINIMIZEDMETRICS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMINIMIZEDMETRICS">
            <summary>
            Sets the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(MINIMIZEDMETRICS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETICONMETRICS">
            <summary>
            Retrieves the metrics associated with icons. The pvParam parameter must point to an ICONMETRICS structure that receives 
            the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(ICONMETRICS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETICONMETRICS">
            <summary>
            Sets the metrics associated with icons. The pvParam parameter must point to an ICONMETRICS structure that contains 
            the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ICONMETRICS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETWORKAREA">
            <summary>
            Sets the size of the work area. The work area is the portion of the screen not obscured by the system taskbar 
            or by application desktop toolbars. The pvParam parameter is a pointer to a RECT structure that specifies the new work area rectangle, 
            expressed in virtual screen coordinates. In a system with multiple display monitors, the function sets the work area 
            of the monitor that contains the specified rectangle.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETWORKAREA">
            <summary>
            Retrieves the size of the work area on the primary display monitor. The work area is the portion of the screen not obscured 
            by the system taskbar or by application desktop toolbars. The pvParam parameter must point to a RECT structure that receives 
            the coordinates of the work area, expressed in virtual screen coordinates. 
            To get the work area of a monitor other than the primary display monitor, call the GetMonitorInfo function.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETPENWINDOWS">
            <summary>
            Windows Me/98/95:  Pen windows is being loaded or unloaded. The uiParam parameter is TRUE when loading and FALSE 
            when unloading pen windows. The pvParam parameter is null.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETHIGHCONTRAST">
            <summary>
            Retrieves information about the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(HIGHCONTRAST). 
            For a general discussion, see remarks.
            Windows NT:  This value is not supported.
            </summary>
            <remarks>
            There is a difference between the High Contrast color scheme and the High Contrast Mode. The High Contrast color scheme changes 
            the system colors to colors that have obvious contrast; you switch to this color scheme by using the Display Options in the control panel. 
            The High Contrast Mode, which uses SPI_GETHIGHCONTRAST and SPI_SETHIGHCONTRAST, advises applications to modify their appearance 
            for visually-impaired users. It involves such things as audible warning to users and customized color scheme 
            (using the Accessibility Options in the control panel). For more information, see HIGHCONTRAST on MSDN.
            For more information on general accessibility features, see Accessibility on MSDN.
            </remarks>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETHIGHCONTRAST">
            <summary>
            Sets the parameters of the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(HIGHCONTRAST).
            Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETKEYBOARDPREF">
            <summary>
            Determines whether the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces 
            that would otherwise be hidden. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if the user relies on the keyboard; or FALSE otherwise.
            Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETKEYBOARDPREF">
            <summary>
            Sets the keyboard preference. The uiParam parameter specifies TRUE if the user relies on the keyboard instead of the mouse, 
            and wants applications to display keyboard interfaces that would otherwise be hidden; uiParam is FALSE otherwise.
            Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSCREENREADER">
            <summary>
            Determines whether a screen reviewer utility is running. A screen reviewer utility directs textual information to an output device, 
            such as a speech synthesizer or Braille display. When this flag is set, an application should provide textual information 
            in situations where it would otherwise present the information graphically.
            The pvParam parameter is a pointer to a BOOL variable that receives TRUE if a screen reviewer utility is running, or FALSE otherwise.
            Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSCREENREADER">
            <summary>
            Determines whether a screen review utility is running. The uiParam parameter specifies TRUE for on, or FALSE for off.
            Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETANIMATION">
            <summary>
            Retrieves the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(ANIMATIONINFO).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETANIMATION">
            <summary>
            Sets the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ANIMATIONINFO).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFONTSMOOTHING">
            <summary>
            Determines whether the font smoothing feature is enabled. This feature uses font antialiasing to make font curves appear smoother 
            by painting pixels at different gray levels. 
            The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is enabled, or FALSE if it is not.
            Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFONTSMOOTHING">
            <summary>
            Enables or disables the font smoothing feature, which uses font antialiasing to make font curves appear smoother 
            by painting pixels at different gray levels. 
            To enable the feature, set the uiParam parameter to TRUE. To disable the feature, set uiParam to FALSE.
            Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDRAGWIDTH">
            <summary>
            Sets the width, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. 
            To retrieve the drag width, call GetSystemMetrics with the SM_CXDRAG flag.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDRAGHEIGHT">
            <summary>
            Sets the height, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. 
            To retrieve the drag height, call GetSystemMetrics with the SM_CYDRAG flag.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETHANDHELD">
            <summary>
            Used internally; applications should not use this value.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETLOWPOWERTIMEOUT">
            <summary>
            Retrieves the time-out value for the low-power phase of screen saving. The pvParam parameter must point to an integer variable 
            that receives the value. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETPOWEROFFTIMEOUT">
            <summary>
            Retrieves the time-out value for the power-off phase of screen saving. The pvParam parameter must point to an integer variable 
            that receives the value. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETLOWPOWERTIMEOUT">
            <summary>
            Sets the time-out value, in seconds, for the low-power phase of screen saving. The uiParam parameter specifies the new value. 
            The pvParam parameter must be null. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETPOWEROFFTIMEOUT">
            <summary>
            Sets the time-out value, in seconds, for the power-off phase of screen saving. The uiParam parameter specifies the new value. 
            The pvParam parameter must be null. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETLOWPOWERACTIVE">
            <summary>
            Determines whether the low-power phase of screen saving is enabled. The pvParam parameter must point to a BOOL variable 
            that receives TRUE if enabled, or FALSE if disabled. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETPOWEROFFACTIVE">
            <summary>
            Determines whether the power-off phase of screen saving is enabled. The pvParam parameter must point to a BOOL variable 
            that receives TRUE if enabled, or FALSE if disabled. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETLOWPOWERACTIVE">
            <summary>
            Activates or deactivates the low-power phase of screen saving. Set uiParam to 1 to activate, or zero to deactivate. 
            The pvParam parameter must be null. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETPOWEROFFACTIVE">
            <summary>
            Activates or deactivates the power-off phase of screen saving. Set uiParam to 1 to activate, or zero to deactivate. 
            The pvParam parameter must be null. This flag is supported for 32-bit applications only.
            Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
            Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETCURSORS">
            <summary>
            Reloads the system cursors. Set the uiParam parameter to zero and the pvParam parameter to null.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETICONS">
            <summary>
            Reloads the system icons. Set the uiParam parameter to zero and the pvParam parameter to null.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETDEFAULTINPUTLANG">
            <summary>
            Retrieves the input locale identifier for the system default input language. The pvParam parameter must point 
            to an HKL variable that receives this value. For more information, see Languages, Locales, and Keyboard Layouts on MSDN.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDEFAULTINPUTLANG">
            <summary>
            Sets the default input language for the system shell and applications. The specified language must be displayable 
            using the current system character set. The pvParam parameter must point to an HKL variable that contains 
            the input locale identifier for the default language. For more information, see Languages, Locales, and Keyboard Layouts on MSDN.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETLANGTOGGLE">
            <summary>
            Sets the hot key set for switching between input languages. The uiParam and pvParam parameters are not used. 
            The value sets the shortcut keys in the keyboard property sheets by reading the registry again. The registry must be set before this flag is used. the path in the registry is \HKEY_CURRENT_USER\keyboard layout\toggle. Valid values are "1" = ALT+SHIFT, "2" = CTRL+SHIFT, and "3" = none.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETWINDOWSEXTENSION">
            <summary>
            Windows 95:  Determines whether the Windows extension, Windows Plus!, is installed. Set the uiParam parameter to 1. 
            The pvParam parameter is not used. The function returns TRUE if the extension is installed, or FALSE if it is not.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSETRAILS">
            <summary>
            Enables or disables the Mouse Trails feature, which improves the visibility of mouse cursor movements by briefly showing 
            a trail of cursors and quickly erasing them. 
            To disable the feature, set the uiParam parameter to zero or 1. To enable the feature, set uiParam to a value greater than 1 
            to indicate the number of cursors drawn in the trail.
            Windows 2000/NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSETRAILS">
            <summary>
            Determines whether the Mouse Trails feature is enabled. This feature improves the visibility of mouse cursor movements 
            by briefly showing a trail of cursors and quickly erasing them. 
            The pvParam parameter must point to an integer variable that receives a value. If the value is zero or 1, the feature is disabled. 
            If the value is greater than 1, the feature is enabled and the value indicates the number of cursors drawn in the trail. 
            The uiParam parameter is not used.
            Windows 2000/NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSCREENSAVERRUNNING">
            <summary>
            Windows Me/98:  Used internally; applications should not use this flag.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SCREENSAVERRUNNING">
            <summary>
            Same as SPI_SETSCREENSAVERRUNNING.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFILTERKEYS">
            <summary>
            Retrieves information about the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(FILTERKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFILTERKEYS">
            <summary>
            Sets the parameters of the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(FILTERKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETTOGGLEKEYS">
            <summary>
            Retrieves information about the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(TOGGLEKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETTOGGLEKEYS">
            <summary>
            Sets the parameters of the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(TOGGLEKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSEKEYS">
            <summary>
            Retrieves information about the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(MOUSEKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSEKEYS">
            <summary>
            Sets the parameters of the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(MOUSEKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSHOWSOUNDS">
            <summary>
            Determines whether the Show Sounds accessibility flag is on or off. If it is on, the user requires an application 
            to present information visually in situations where it would otherwise present the information only in audible form. 
            The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. 
            Using this value is equivalent to calling GetSystemMetrics (SM_SHOWSOUNDS). That is the recommended call.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSHOWSOUNDS">
            <summary>
            Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(SOUNDSENTRY).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSTICKYKEYS">
            <summary>
            Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(STICKYKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSTICKYKEYS">
            <summary>
            Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(STICKYKEYS).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETACCESSTIMEOUT">
            <summary>
            Retrieves information about the time-out period associated with the accessibility features. The pvParam parameter must point 
            to an ACCESSTIMEOUT structure that receives the information. Set the cbSize member of this structure and the uiParam parameter 
            to sizeof(ACCESSTIMEOUT).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETACCESSTIMEOUT">
            <summary>
            Sets the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT 
            structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ACCESSTIMEOUT).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSERIALKEYS">
            <summary>
            Windows Me/98/95:  Retrieves information about the SerialKeys accessibility feature. The pvParam parameter must point 
            to a SERIALKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter 
            to sizeof(SERIALKEYS).
            Windows Server 2003, Windows XP/2000/NT:  Not supported. The user controls this feature through the control panel.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSERIALKEYS">
            <summary>
            Windows Me/98/95:  Sets the parameters of the SerialKeys accessibility feature. The pvParam parameter must point 
            to a SERIALKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter 
            to sizeof(SERIALKEYS). 
            Windows Server 2003, Windows XP/2000/NT:  Not supported. The user controls this feature through the control panel.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSOUNDSENTRY">
            <summary>
            Retrieves information about the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure 
            that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(SOUNDSENTRY).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSOUNDSENTRY">
            <summary>
            Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure 
            that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(SOUNDSENTRY).
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSNAPTODEFBUTTON">
            <summary>
            Determines whether the snap-to-default-button feature is enabled. If enabled, the mouse cursor automatically moves 
            to the default button, such as OK or Apply, of a dialog box. The pvParam parameter must point to a BOOL variable 
            that receives TRUE if the feature is on, or FALSE if it is off. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSNAPTODEFBUTTON">
            <summary>
            Enables or disables the snap-to-default-button feature. If enabled, the mouse cursor automatically moves to the default button, 
            such as OK or Apply, of a dialog box. Set the uiParam parameter to TRUE to enable the feature, or FALSE to disable it. 
            Applications should use the ShowWindow function when displaying a dialog box so the dialog manager can position the mouse cursor. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSEHOVERWIDTH">
            <summary>
            Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent 
            to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSEHOVERWIDTH">
            <summary>
            Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent 
            to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSEHOVERHEIGHT">
            <summary>
            Retrieves the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent 
            to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the height. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSEHOVERHEIGHT">
            <summary>
            Sets the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent 
            to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new height.
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSEHOVERTIME">
            <summary>
            Retrieves the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent 
            to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the time. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSEHOVERTIME">
            <summary>
            Sets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent 
            to generate a WM_MOUSEHOVER message. This is used only if you pass HOVER_DEFAULT in the dwHoverTime parameter in the call to TrackMouseEvent. Set the uiParam parameter to the new time. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETWHEELSCROLLLINES">
            <summary>
            Retrieves the number of lines to scroll when the mouse wheel is rotated. The pvParam parameter must point 
            to a UINT variable that receives the number of lines. The default value is 3. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETWHEELSCROLLLINES">
            <summary>
            Sets the number of lines to scroll when the mouse wheel is rotated. The number of lines is set from the uiParam parameter. 
            The number of lines is the suggested number of lines to scroll when the mouse wheel is rolled without using modifier keys. 
            If the number is 0, then no scrolling should occur. If the number of lines to scroll is greater than the number of lines viewable, 
            and in particular if it is WHEEL_PAGESCROLL (#defined as UINT_MAX), the scroll operation should be interpreted 
            as clicking once in the page down or page up regions of the scroll bar.
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMENUSHOWDELAY">
            <summary>
            Retrieves the time, in milliseconds, that the system waits before displaying a shortcut menu when the mouse cursor is 
            over a submenu item. The pvParam parameter must point to a DWORD variable that receives the time of the delay. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMENUSHOWDELAY">
            <summary>
            Sets uiParam to the time, in milliseconds, that the system waits before displaying a shortcut menu when the mouse cursor is 
            over a submenu item. 
            Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSHOWIMEUI">
            <summary>
            Determines whether the IME status window is visible (on a per-user basis). The pvParam parameter must point to a BOOL variable 
            that receives TRUE if the status window is visible, or FALSE if it is not.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSHOWIMEUI">
            <summary>
            Sets whether the IME status window is visible or not on a per-user basis. The uiParam parameter specifies TRUE for on or FALSE for off.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSESPEED">
            <summary>
            Retrieves the current mouse speed. The mouse speed determines how far the pointer will move based on the distance the mouse moves. 
            The pvParam parameter must point to an integer that receives a value which ranges between 1 (slowest) and 20 (fastest). 
            A value of 10 is the default. The value can be set by an end user using the mouse control panel application or 
            by an application using SPI_SETMOUSESPEED.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSESPEED">
            <summary>
            Sets the current mouse speed. The pvParam parameter is an integer between 1 (slowest) and 20 (fastest). A value of 10 is the default. 
            This value is typically set using the mouse control panel application.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSCREENSAVERRUNNING">
            <summary>
            Determines whether a screen saver is currently running on the window station of the calling process. 
            The pvParam parameter must point to a BOOL variable that receives TRUE if a screen saver is currently running, or FALSE otherwise.
            Note that only the interactive window station, "WinSta0", can have a screen saver running.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETDESKWALLPAPER">
            <summary>
            Retrieves the full path of the bitmap file for the desktop wallpaper. The pvParam parameter must point to a buffer 
            that receives a null-terminated path string. Set the uiParam parameter to the size, in characters, of the pvParam buffer. The returned string will not exceed MAX_PATH characters. If there is no desktop wallpaper, the returned string is empty.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETACTIVEWINDOWTRACKING">
            <summary>
            Determines whether active window tracking (activating the window the mouse is on) is on or off. The pvParam parameter must point 
            to a BOOL variable that receives TRUE for on, or FALSE for off.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETACTIVEWINDOWTRACKING">
            <summary>
            Sets active window tracking (activating the window the mouse is on) either on or off. Set pvParam to TRUE for on or FALSE for off.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMENUANIMATION">
            <summary>
            Determines whether the menu animation feature is enabled. This master switch must be on to enable menu animation effects. 
            The pvParam parameter must point to a BOOL variable that receives TRUE if animation is enabled and FALSE if it is disabled. 
            If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMENUANIMATION">
            <summary>
            Enables or disables menu animation. This master switch must be on for any menu animation to occur. 
            The pvParam parameter is a BOOL variable; set pvParam to TRUE to enable animation and FALSE to disable animation.
            If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETCOMBOBOXANIMATION">
            <summary>
            Determines whether the slide-open effect for combo boxes is enabled. The pvParam parameter must point to a BOOL variable 
            that receives TRUE for enabled, or FALSE for disabled.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETCOMBOBOXANIMATION">
            <summary>
            Enables or disables the slide-open effect for combo boxes. Set the pvParam parameter to TRUE to enable the gradient effect, 
            or FALSE to disable it.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETLISTBOXSMOOTHSCROLLING">
            <summary>
            Determines whether the smooth-scrolling effect for list boxes is enabled. The pvParam parameter must point to a BOOL variable 
            that receives TRUE for enabled, or FALSE for disabled.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETLISTBOXSMOOTHSCROLLING">
            <summary>
            Enables or disables the smooth-scrolling effect for list boxes. Set the pvParam parameter to TRUE to enable the smooth-scrolling effect,
            or FALSE to disable it.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETGRADIENTCAPTIONS">
            <summary>
            Determines whether the gradient effect for window title bars is enabled. The pvParam parameter must point to a BOOL variable 
            that receives TRUE for enabled, or FALSE for disabled. For more information about the gradient effect, see the GetSysColor function.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETGRADIENTCAPTIONS">
            <summary>
            Enables or disables the gradient effect for window title bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. 
            The gradient effect is possible only if the system has a color depth of more than 256 colors. For more information about 
            the gradient effect, see the GetSysColor function.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETKEYBOARDCUES">
            <summary>
            Determines whether menu access keys are always underlined. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if menu access keys are always underlined, and FALSE if they are underlined only when the menu is activated by the keyboard.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETKEYBOARDCUES">
            <summary>
            Sets the underlining of menu access key letters. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to always underline menu 
            access keys, or FALSE to underline menu access keys only when the menu is activated from the keyboard.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMENUUNDERLINES">
            <summary>
            Same as SPI_GETKEYBOARDCUES.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMENUUNDERLINES">
            <summary>
            Same as SPI_SETKEYBOARDCUES.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETACTIVEWNDTRKZORDER">
            <summary>
            Determines whether windows activated through active window tracking will be brought to the top. The pvParam parameter must point 
            to a BOOL variable that receives TRUE for on, or FALSE for off.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETACTIVEWNDTRKZORDER">
            <summary>
            Determines whether or not windows activated through active window tracking should be brought to the top. Set pvParam to TRUE 
            for on or FALSE for off.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETHOTTRACKING">
            <summary>
            Determines whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled. The pvParam parameter 
            must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. 
            Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. You can query this value to decide 
            whether to use hot tracking in the user interface of your application.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETHOTTRACKING">
            <summary>
            Enables or disables hot tracking of user-interface elements such as menu names on menu bars. Set the pvParam parameter to TRUE 
            to enable it, or FALSE to disable it.
            Hot-tracking means that when the cursor moves over an item, it is highlighted but not selected.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMENUFADE">
            <summary>
            Determines whether menu fade animation is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE 
            when fade animation is enabled and FALSE when it is disabled. If fade animation is disabled, menus use slide animation. 
            This flag is ignored unless menu animation is enabled, which you can do using the SPI_SETMENUANIMATION flag. 
            For more information, see AnimateWindow.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMENUFADE">
            <summary>
            Enables or disables menu fade animation. Set pvParam to TRUE to enable the menu fade effect or FALSE to disable it. 
            If fade animation is disabled, menus use slide animation. he The menu fade effect is possible only if the system 
            has a color depth of more than 256 colors. This flag is ignored unless SPI_MENUANIMATION is also set. For more information, 
            see AnimateWindow.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETSELECTIONFADE">
            <summary>
            Determines whether the selection fade effect is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if enabled or FALSE if disabled. 
            The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out 
            after the menu is dismissed.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETSELECTIONFADE">
            <summary>
            Set pvParam to TRUE to enable the selection fade effect or FALSE to disable it.
            The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out 
            after the menu is dismissed. The selection fade effect is possible only if the system has a color depth of more than 256 colors.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETTOOLTIPANIMATION">
            <summary>
            Determines whether ToolTip animation is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if enabled or FALSE if disabled. If ToolTip animation is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTips use fade or slide animation.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETTOOLTIPANIMATION">
            <summary>
            Set pvParam to TRUE to enable ToolTip animation or FALSE to disable it. If enabled, you can use SPI_SETTOOLTIPFADE 
            to specify fade or slide animation.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETTOOLTIPFADE">
            <summary>
            If SPI_SETTOOLTIPANIMATION is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTip animation uses a fade effect or a slide effect.
             The pvParam parameter must point to a BOOL variable that receives TRUE for fade animation or FALSE for slide animation. 
             For more information on slide and fade effects, see AnimateWindow.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETTOOLTIPFADE">
            <summary>
            If the SPI_SETTOOLTIPANIMATION flag is enabled, use SPI_SETTOOLTIPFADE to indicate whether ToolTip animation uses a fade effect 
            or a slide effect. Set pvParam to TRUE for fade animation or FALSE for slide animation. The tooltip fade effect is possible only 
            if the system has a color depth of more than 256 colors. For more information on the slide and fade effects, 
            see the AnimateWindow function.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETCURSORSHADOW">
            <summary>
            Determines whether the cursor has a shadow around it. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if the shadow is enabled, FALSE if it is disabled. This effect appears only if the system has a color depth of more than 256 colors.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETCURSORSHADOW">
            <summary>
            Enables or disables a shadow around the cursor. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable the shadow 
            or FALSE to disable the shadow. This effect appears only if the system has a color depth of more than 256 colors.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSESONAR">
            <summary>
            Retrieves the state of the Mouse Sonar feature. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if enabled or FALSE otherwise. For more information, see About Mouse Input on MSDN.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSESONAR">
            <summary>
            Turns the Sonar accessibility feature on or off. This feature briefly shows several concentric circles around the mouse pointer 
            when the user presses and releases the CTRL key. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. 
            For more information, see About Mouse Input.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSECLICKLOCK">
            <summary>
            Retrieves the state of the Mouse ClickLock feature. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if enabled, or FALSE otherwise. For more information, see About Mouse Input.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSECLICKLOCK">
            <summary>
            Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse button 
            when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The uiParam parameter specifies 
            TRUE for on, 
            or FALSE for off. The default is off. For more information, see Remarks and About Mouse Input on MSDN.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSEVANISH">
            <summary>
            Retrieves the state of the Mouse Vanish feature. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if enabled or FALSE otherwise. For more information, see About Mouse Input on MSDN.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSEVANISH">
            <summary>
            Turns the Vanish feature on or off. This feature hides the mouse pointer when the user types; the pointer reappears 
            when the user moves the mouse. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. 
            For more information, see About Mouse Input on MSDN.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFLATMENU">
            <summary>
            Determines whether native User menus have flat menu appearance. The pvParam parameter must point to a BOOL variable 
            that returns TRUE if the flat menu appearance is set, or FALSE otherwise.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFLATMENU">
            <summary>
            Enables or disables flat menu appearance for native User menus. Set pvParam to TRUE to enable flat menu appearance 
            or FALSE to disable it. 
            When enabled, the menu bar uses COLOR_MENUBAR for the menubar background, COLOR_MENU for the menu-popup background, COLOR_MENUHILIGHT 
            for the fill of the current menu selection, and COLOR_HILIGHT for the outline of the current menu selection. 
            If disabled, menus are drawn using the same metrics and colors as in Windows 2000 and earlier.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETDROPSHADOW">
            <summary>
            Determines whether the drop shadow effect is enabled. The pvParam parameter must point to a BOOL variable that returns TRUE 
            if enabled or FALSE if disabled.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETDROPSHADOW">
            <summary>
            Enables or disables the drop shadow effect. Set pvParam to TRUE to enable the drop shadow effect or FALSE to disable it. 
            You must also have CS_DROPSHADOW in the window class style.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETBLOCKSENDINPUTRESETS">
            <summary>
            Retrieves a BOOL indicating whether an application can reset the screensaver's timer by calling the SendInput function 
            to simulate keyboard or mouse input. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if the simulated input will be blocked, or FALSE otherwise. 
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETBLOCKSENDINPUTRESETS">
            <summary>
            Determines whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard 
            or mouse input. The uiParam parameter specifies TRUE if the screensaver will not be deactivated by simulated input, 
            or FALSE if the screensaver will be deactivated by simulated input.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETUIEFFECTS">
            <summary>
            Determines whether UI effects are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE 
            if all UI effects are enabled, or FALSE if they are disabled.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETUIEFFECTS">
            <summary>
            Enables or disables UI effects. Set the pvParam parameter to TRUE to enable all UI effects or FALSE to disable all UI effects.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFOREGROUNDLOCKTIMEOUT">
            <summary>
            Retrieves the amount of time following user input, in milliseconds, during which the system will not allow applications 
            to force themselves into the foreground. The pvParam parameter must point to a DWORD variable that receives the time.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFOREGROUNDLOCKTIMEOUT">
            <summary>
            Sets the amount of time following user input, in milliseconds, during which the system does not allow applications 
            to force themselves into the foreground. Set pvParam to the new timeout value.
            The calling thread must be able to change the foreground window, otherwise the call fails.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETACTIVEWNDTRKTIMEOUT">
            <summary>
            Retrieves the active window tracking delay, in milliseconds. The pvParam parameter must point to a DWORD variable 
            that receives the time.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETACTIVEWNDTRKTIMEOUT">
            <summary>
            Sets the active window tracking delay. Set pvParam to the number of milliseconds to delay before activating the window 
            under the mouse pointer.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFOREGROUNDFLASHCOUNT">
            <summary>
            Retrieves the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. 
            The pvParam parameter must point to a DWORD variable that receives the value.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFOREGROUNDFLASHCOUNT">
            <summary>
            Sets the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. 
            Set pvParam to the number of times to flash.
            Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETCARETWIDTH">
            <summary>
            Retrieves the caret width in edit controls, in pixels. The pvParam parameter must point to a DWORD that receives this value.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETCARETWIDTH">
            <summary>
            Sets the caret width in edit controls. Set pvParam to the desired width, in pixels. The default and minimum value is 1.
            Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETMOUSECLICKLOCKTIME">
            <summary>
            Retrieves the time delay before the primary mouse button is locked. The pvParam parameter must point to DWORD that receives 
            the time delay. This is only enabled if SPI_SETMOUSECLICKLOCK is set to TRUE. For more information, see About Mouse Input on MSDN.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETMOUSECLICKLOCKTIME">
            <summary>
            Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse button 
            when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The uiParam parameter 
            specifies TRUE for on, or FALSE for off. The default is off. For more information, see Remarks and About Mouse Input on MSDN.
            Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFONTSMOOTHINGTYPE">
            <summary>
            Retrieves the type of font smoothing. The pvParam parameter must point to a UINT that receives the information.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFONTSMOOTHINGTYPE">
            <summary>
            Sets the font smoothing type. The pvParam parameter points to a UINT that contains either FE_FONTSMOOTHINGSTANDARD, 
            if standard anti-aliasing is used, or FE_FONTSMOOTHINGCLEARTYPE, if ClearType is used. The default is FE_FONTSMOOTHINGSTANDARD. 
            When using this option, the fWinIni parameter must be set to SPIF_SENDWININICHANGE | SPIF_UPDATEINIFILE; otherwise, 
            SystemParametersInfo fails.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFONTSMOOTHINGCONTRAST">
            <summary>
            Retrieves a contrast value that is used in ClearType™ smoothing. The pvParam parameter must point to a UINT 
            that receives the information.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFONTSMOOTHINGCONTRAST">
            <summary>
            Sets the contrast value used in ClearType smoothing. The pvParam parameter points to a UINT that holds the contrast value. 
            Valid contrast values are from 1000 to 2200. The default value is 1400.
            When using this option, the fWinIni parameter must be set to SPIF_SENDWININICHANGE | SPIF_UPDATEINIFILE; otherwise, 
            SystemParametersInfo fails.
            SPI_SETFONTSMOOTHINGTYPE must also be set to FE_FONTSMOOTHINGCLEARTYPE.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFOCUSBORDERWIDTH">
            <summary>
            Retrieves the width, in pixels, of the left and right edges of the focus rectangle drawn with DrawFocusRect. 
            The pvParam parameter must point to a UINT.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFOCUSBORDERWIDTH">
            <summary>
            Sets the height of the left and right edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFOCUSBORDERHEIGHT">
            <summary>
            Retrieves the height, in pixels, of the top and bottom edges of the focus rectangle drawn with DrawFocusRect. 
            The pvParam parameter must point to a UINT.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFOCUSBORDERHEIGHT">
            <summary>
            Sets the height of the top and bottom edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter.
            Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_GETFONTSMOOTHINGORIENTATION">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:BaseModule.XPAppearance.SPI.SPI_SETFONTSMOOTHINGORIENTATION">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:BaseModule.XmlDomUtil">
            <summary>
            Summary description for XmlDomUtil.
            common functions needed to read, write, and edit a xml document
            </summary>
        </member>
        <member name="M:BaseModule.XmlDomUtil.doesFileExist(System.String)">
            <summary>
            get the boolean value for file existing
            </summary>
        </member>
        <member name="M:BaseModule.XmlDomUtil.getThisNode(System.String,BaseModule.SimpleElement)">
            <summary>
            Traverse the DOM tree look for the node with Name: "nodeName"
            </summary>
            <param name="nodeName">node name</param>
            <param name="node">root of the DOM tree </param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.XmlDomUtil.getThisNodeWithAttribute(System.String,System.String,System.String,BaseModule.SimpleElement)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.XmlDomUtil.getValueOfThisAttribute(System.String,System.String,BaseModule.SimpleElement)">
            <summary>
            get the value the attribute "attributeName" 
            in the nod "nodeName"
            </summary>
            <param name="nodeName">node name</param>
            <param name="attributeName">the attribute</param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.XmlDomUtil.getXmlStringRootNode(System.String)">
            <summary>
            Get root node of xml string.
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BaseModule.XmlDomUtil.readConfigFileToDom(System.String)" -->
        <member name="M:BaseModule.XmlDomUtil.readConfigFileWithEntirePathToDOM(System.String)">
            <summary>
            Given the full path of an XML file, will read that file to the DOM object.
            </summary>
            <param name="filePath">The path of the XML file</param>
            <returns>The root node of the DOM tree</returns>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeToFile(System.Xml.XmlTextWriter,BaseModule.SimpleElement)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="node"></param>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeXMLtoFile(BaseModule.SimpleElement,System.Int32,System.String)">
            <summary>
            Save the XML DOM tree to an unencrypted file
            </summary>
            <param name="node">root of the dom tree</param>
            <param name="depth">indentation</param>
            <param name="fileName">name of the unencrypted file to write to</param>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeXMLtoFilePath(BaseModule.SimpleElement,System.Int32,System.String)">
            <summary>
            Save the XML DOM tree to an arbitrary file path for an unencrypted file.
            </summary>
            <param name="node">Root of the DOM tree</param>
            <param name="depth">Indentation</param>
            <param name="filePath">Full path of the unencrypted file to be saved</param>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeXMLtoEncryptedFilePath(BaseModule.SimpleElement,System.Int32,System.String)">
            <summary>
            Save the XML DOM tree to an arbitrary file path for an encrypted file.
            </summary>
            <param name="node">Root of the DOM tree</param>
            <param name="depth">Indentation</param>
            <param name="filePath">Full path of the encrypted file to be saved</param>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeXMLtoEncryptedFile(BaseModule.SimpleElement,System.Int32,System.String)">
            <summary>
            Save the XML DOM tree to an encrypted file
            </summary>
            <param name="node">root of the dom tree</param>
            <param name="depth">indentation</param>
            <param name="fileName">name of the encrypted file to write to</param>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeDomToXmlString(BaseModule.SimpleElement,System.Int32)">
            <summary>
            write Dom starting from node to a XML string
            </summary>
            <param name="node"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:BaseModule.XmlDomUtil.writeToString(System.Xml.XmlTextWriter,BaseModule.SimpleElement)">
            <summary>
            
            </summary>
            <param name="xmlWriter"></param>
            <param name="node"></param>
        </member>
        <member name="M:BaseModule.XmlDomUtil.getXmlRootNode(System.String)">
            <summary>
            Get xml root node from xml content string.
            </summary>
            <param name="xmlString">xml content string.</param>
            <returns>xml root node</returns>
        </member>
        <member name="T:BaseModule.XmlUtil">
            <summary>
            Summary description for XmlUtil.
            </summary>
        </member>
    </members>
</doc>
